{
  "address": "0x2CDCfFDb6be68b903B47D54FE70c8dA6b2995cDC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WNATIVE",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fee_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "rate",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "min",
          "type": "uint16"
        }
      ],
      "name": "FeeChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_LP",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amt",
          "type": "uint256"
        }
      ],
      "name": "estimateZapIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amt",
          "type": "uint256"
        }
      ],
      "name": "estimateZapInToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "rate",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "min",
          "type": "uint16"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridgeToken",
          "type": "address"
        }
      ],
      "name": "setTokenBridgeForRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "setUseNativeRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "routerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "swapToNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "routerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "swapToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "useNativeRouter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_toRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "zapAcross",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "routerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "zapIn",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "routerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "zapInToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "routerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "zapOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "routerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "zapOutToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc9256675629d05673357c9518d4b85865d209d4af00e9b2e060a9d9ef20c529d",
  "receipt": {
    "to": null,
    "from": "0x0DCC098Fa701906a49c3196B1FD2464F4802F4E2",
    "contractAddress": "0x2CDCfFDb6be68b903B47D54FE70c8dA6b2995cDC",
    "transactionIndex": 0,
    "gasUsed": "3600094",
    "logsBloom": "0x
    "blockHash": "0x90e8d42c1384e45b328fda665532282899e8e642d8ab50f15af411bd78409252",
    "transactionHash": "0xc9256675629d05673357c9518d4b85865d209d4af00e9b2e060a9d9ef20c529d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14553231,
        "transactionHash": "0xc9256675629d05673357c9518d4b85865d209d4af00e9b2e060a9d9ef20c529d",
        "address": "0x2CDCfFDb6be68b903B47D54FE70c8dA6b2995cDC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000dcc098fa701906a49c3196b1fd2464f4802f4e2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x90e8d42c1384e45b328fda665532282899e8e642d8ab50f15af411bd78409252"
      }
    ],
    "blockNumber": 14553231,
    "cumulativeGasUsed": "3600094",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x094616f0bdfb0b526bd735bf66eca0ad254ca81f"
  ],
  "solcInputHash": "af61355c15521a8508a53efed3f3e808",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WNATIVE\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fee_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"min\",\"type\":\"uint16\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"estimateZapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"estimateZapInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"min\",\"type\":\"uint16\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"}],\"name\":\"setTokenBridgeForRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setUseNativeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"swapToNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"swapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"useNativeRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"zapAcross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"zapInToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"zapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"zapOutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Zap.sol\":\"Zap\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Zap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n// Part: IHyperswapRouter01\\n\\ninterface IHyperswapRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\n// Part: IUniswapV2Pair\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\n// Part: IUniswapV2Router01\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\n// Part: OpenZeppelin/openzeppelin-contracts@4.1.0/IERC20\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// Part: IVault\\n\\ninterface IVault is IERC20 {\\n    function deposit(uint256 amount) external;\\n    function withdraw(uint256 shares) external;\\n    function want() external pure returns (address);\\n}\\n\\n// Part: OpenZeppelin/openzeppelin-contracts@4.1.0/Address\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// Part: OpenZeppelin/openzeppelin-contracts@4.1.0/SafeMath\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n// Part: TransferHelper\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\\n// Part: OpenZeppelin/openzeppelin-contracts@4.1.0/SafeERC20\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n// File: Context.sol\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File: Ownable.sol\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n// File: Zap.sol\\n\\ncontract Zap is Ownable {\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    address private WNATIVE;\\n    address private FEE_TO_ADDR;\\n    uint16 FEE_RATE;\\n    uint16 MIN_AMT;\\n    mapping(address => mapping(address => address)) private tokenBridgeForRouter;\\n\\n    event FeeChange(address fee_to, uint16 rate, uint16 min);\\n\\n    mapping (address => bool) public useNativeRouter;\\n\\n    constructor(address _WNATIVE) Ownable() {\\n       WNATIVE = _WNATIVE;\\n       FEE_TO_ADDR = msg.sender;\\n       FEE_RATE = 330;\\n       MIN_AMT = 10000;\\n    }\\n\\n    /* ========== External Functions ========== */\\n\\n    receive() external payable {}\\n\\n    function zapInToken(address _from, uint amount, address _to, address routerAddr, address _recipient) external {\\n        // From an ERC20 to an LP token, through specified router, going through base asset if necessary\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n        // we'll need this approval to add liquidity\\n        _approveTokenIfNeeded(_from, routerAddr);\\n        _swapTokenToLP(_from, amount, _to, _recipient, routerAddr);\\n    }\\n\\n    function estimateZapInToken(address _from, address _to, address _router, uint _amt) public view returns (uint256, uint256) {\\n        // get pairs for desired lp\\n        if (_from == IUniswapV2Pair(_to).token0() || _from == IUniswapV2Pair(_to).token1()) { // check if we already have one of the assets\\n            // if so, we're going to sell half of _from for the other token we need\\n            // figure out which token we need, and approve\\n            address other = _from == IUniswapV2Pair(_to).token0() ? IUniswapV2Pair(_to).token1() : IUniswapV2Pair(_to).token0();\\n            // calculate amount of _from to sell\\n            uint sellAmount = _amt.div(2);\\n            // execute swap\\n            uint otherAmount = _estimateSwap(_from, sellAmount, other, _router);\\n            if (_from == IUniswapV2Pair(_to).token0()) {\\n                return (sellAmount, otherAmount);\\n            } else {\\n                return (otherAmount, sellAmount);\\n            }\\n        } else {\\n            // go through native token for highest liquidity\\n            uint nativeAmount = _from == WNATIVE ? _amt : _estimateSwap(_from, _amt, WNATIVE, _router);\\n            return estimateZapIn(_to, _router, nativeAmount);\\n        }\\n    }\\n\\n    function zapIn(address _to, address routerAddr, address _recipient) external payable {\\n        // from Native to an LP token through the specified router\\n        _swapNativeToLP(_to, msg.value, _recipient, routerAddr);\\n    }\\n\\n    function estimateZapIn(address _LP, address _router, uint _amt) public view returns (uint256, uint256) {\\n        uint zapAmt = _amt.div(2);\\n\\n        IUniswapV2Pair pair = IUniswapV2Pair(_LP);\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n\\n        if (token0 == WNATIVE || token1 == WNATIVE) {\\n            address token = token0 == WNATIVE ? token1 : token0;\\n            uint tokenAmt = _estimateSwap(WNATIVE, zapAmt, token, _router);\\n            if (token0 == WNATIVE) {\\n                return (zapAmt, tokenAmt);\\n            } else {\\n                return (tokenAmt, zapAmt);\\n            }\\n        } else {\\n            uint token0Amt = _estimateSwap(WNATIVE, zapAmt, token0, _router);\\n            uint token1Amt = _estimateSwap(WNATIVE, zapAmt, token1, _router);\\n\\n            return (token0Amt, token1Amt);\\n        }\\n    }\\n\\n    function zapAcross(address _from, uint amount, address _toRouter, address _recipient) external {\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        IUniswapV2Pair pair = IUniswapV2Pair(_from);\\n        _approveTokenIfNeeded(pair.token0(), _toRouter);\\n        _approveTokenIfNeeded(pair.token1(), _toRouter);\\n\\n        IERC20(_from).safeTransfer(_from, amount);\\n        uint amt0;\\n        uint amt1;\\n        (amt0, amt1) = pair.burn(address(this));\\n        IUniswapV2Router01(_toRouter).addLiquidity(pair.token0(), pair.token1(), amt0, amt1, 0, 0, _recipient, block.timestamp);\\n    }\\n\\n    function zapOut(address _from, uint amount, address routerAddr, address _recipient) external {\\n        // from an LP token to Native through specified router\\n        // take the LP token\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n        _approveTokenIfNeeded(_from, routerAddr);\\n\\n        // get pairs for LP\\n        address token0 = IUniswapV2Pair(_from).token0();\\n        address token1 = IUniswapV2Pair(_from).token1();\\n        _approveTokenIfNeeded(token0, routerAddr);\\n        _approveTokenIfNeeded(token1, routerAddr);\\n        // check if either is already native token\\n        if (token0 == WNATIVE || token1 == WNATIVE) {\\n            // if so, we only need to swap one, figure out which and how much\\n            address token = token0 != WNATIVE ? token0 : token1;\\n            uint amtToken;\\n            uint amtETH;\\n            (amtToken, amtETH) = IUniswapV2Router01(routerAddr).removeLiquidityETH(token, amount, 0, 0, address(this), block.timestamp);\\n            // swap with msg.sender as recipient, so they already get the Native\\n            _swapTokenForNative(token, amtToken, _recipient, routerAddr);\\n            // send other half of Native\\n            TransferHelper.safeTransferETH(_recipient, amtETH);\\n        } else {\\n            // convert both for Native with msg.sender as recipient\\n            uint amt0;\\n            uint amt1;\\n            (amt0, amt1) = IUniswapV2Router01(routerAddr).removeLiquidity(token0, token1, amount, 0, 0, address(this), block.timestamp);\\n            _swapTokenForNative(token0, amt0, _recipient, routerAddr);\\n            _swapTokenForNative(token1, amt1, _recipient, routerAddr);\\n        }\\n    }\\n\\n    function zapOutToken(address _from, uint amount, address _to, address routerAddr, address _recipient) external {\\n        // from an LP token to an ERC20 through specified router\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n        _approveTokenIfNeeded(_from, routerAddr);\\n\\n        address token0 = IUniswapV2Pair(_from).token0();\\n        address token1 = IUniswapV2Pair(_from).token1();\\n        _approveTokenIfNeeded(token0, routerAddr);\\n        _approveTokenIfNeeded(token1, routerAddr);\\n        uint amt0;\\n        uint amt1;\\n        (amt0, amt1) = IUniswapV2Router01(routerAddr).removeLiquidity(token0, token1, amount, 0, 0, address(this), block.timestamp);\\n        if (token0 != _to) {\\n            amt0 = _swap(token0, amt0, _to, address(this), routerAddr);\\n        }\\n        if (token1 != _to) {\\n            amt1 = _swap(token1, amt1, _to, address(this), routerAddr);\\n        }\\n        IERC20(_to).safeTransfer(_recipient, amt0.add(amt1));\\n    }\\n\\n    function swapToken(address _from, uint amount, address _to, address routerAddr, address _recipient) external {\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n        _approveTokenIfNeeded(_from, routerAddr);\\n        _swap(_from, amount, _to, _recipient, routerAddr);\\n    }\\n\\n    function swapToNative(address _from, uint amount, address routerAddr, address _recipient) external {\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n        _approveTokenIfNeeded(_from, routerAddr);\\n        _swapTokenForNative(_from, amount, _recipient, routerAddr);\\n    }\\n\\n\\n    /* ========== Private Functions ========== */\\n\\n    function _approveTokenIfNeeded(address token, address router) private {\\n        if (IERC20(token).allowance(address(this), router) == 0) {\\n            IERC20(token).safeApprove(router, type(uint).max);\\n        }\\n    }\\n\\n    function _swapTokenToLP(address _from, uint amount, address _to, address recipient, address routerAddr) private returns (uint) {\\n                // get pairs for desired lp\\n        if (_from == IUniswapV2Pair(_to).token0() || _from == IUniswapV2Pair(_to).token1()) { // check if we already have one of the assets\\n            // if so, we're going to sell half of _from for the other token we need\\n            // figure out which token we need, and approve\\n            address other = _from == IUniswapV2Pair(_to).token0() ? IUniswapV2Pair(_to).token1() : IUniswapV2Pair(_to).token0();\\n            _approveTokenIfNeeded(other, routerAddr);\\n            // calculate amount of _from to sell\\n            uint sellAmount = amount.div(2);\\n            // execute swap\\n            uint otherAmount = _swap(_from, sellAmount, other, address(this), routerAddr);\\n            uint liquidity;\\n            ( , , liquidity) = IUniswapV2Router01(routerAddr).addLiquidity(_from, other, amount.sub(sellAmount), otherAmount, 0, 0, recipient, block.timestamp);\\n            return liquidity;\\n        } else {\\n            // go through native token for highest liquidity\\n            uint nativeAmount = _swapTokenForNative(_from, amount, address(this), routerAddr);\\n            return _swapNativeToLP(_to, nativeAmount, recipient, routerAddr);\\n        }\\n    }\\n\\n    function _swapNativeToLP(address _LP, uint amount, address recipient, address routerAddress) private returns (uint) {\\n            // LP\\n            IUniswapV2Pair pair = IUniswapV2Pair(_LP);\\n            address token0 = pair.token0();\\n            address token1 = pair.token1();\\n            uint liquidity;\\n            if (token0 == WNATIVE || token1 == WNATIVE) {\\n                address token = token0 == WNATIVE ? token1 : token0;\\n                ( , , liquidity) = _swapHalfNativeAndProvide(token, amount, routerAddress, recipient);\\n            } else {\\n                ( , , liquidity) = _swapNativeToEqualTokensAndProvide(token0, token1, amount, routerAddress, recipient);\\n            }\\n            return liquidity;\\n    }\\n\\n    function _swapHalfNativeAndProvide(address token, uint amount, address routerAddress, address recipient) private returns (uint, uint, uint) {\\n            uint swapValue = amount.div(2);\\n            uint tokenAmount = _swapNativeForToken(token, swapValue, address(this), routerAddress);\\n            _approveTokenIfNeeded(token, routerAddress);\\n            if (useNativeRouter[routerAddress]) {\\n                IHyperswapRouter01 router = IHyperswapRouter01(routerAddress);\\n                return router.addLiquidityETH{value : amount.sub(swapValue)}(token, tokenAmount, 0, 0, recipient, block.timestamp);\\n            }\\n            else {\\n                IUniswapV2Router01 router = IUniswapV2Router01(routerAddress);\\n                return router.addLiquidityETH{value : amount.sub(swapValue)}(token, tokenAmount, 0, 0, recipient, block.timestamp);\\n            }\\n    }\\n\\n    function _swapNativeToEqualTokensAndProvide(address token0, address token1, uint amount, address routerAddress, address recipient) private returns (uint, uint, uint) {\\n            uint swapValue = amount.div(2);\\n            uint token0Amount = _swapNativeForToken(token0, swapValue, address(this), routerAddress);\\n            uint token1Amount = _swapNativeForToken(token1, amount.sub(swapValue), address(this), routerAddress);\\n            _approveTokenIfNeeded(token0, routerAddress);\\n            _approveTokenIfNeeded(token1, routerAddress);\\n            IUniswapV2Router01 router = IUniswapV2Router01(routerAddress);\\n            return router.addLiquidity(token0, token1, token0Amount, token1Amount, 0, 0, recipient, block.timestamp);\\n    }\\n\\n    function _swapNativeForToken(address token, uint value, address recipient, address routerAddr) private returns (uint) {\\n        address[] memory path;\\n        IUniswapV2Router01 router = IUniswapV2Router01(routerAddr);\\n\\n        if (tokenBridgeForRouter[token][routerAddr] != address(0)) {\\n            path = new address[](3);\\n            path[0] = WNATIVE;\\n            path[1] = tokenBridgeForRouter[token][routerAddr];\\n            path[2] = token;\\n        } else {\\n            path = new address[](2);\\n            path[0] = WNATIVE;\\n            path[1] = token;\\n        }\\n\\n        uint[] memory amounts = router.swapExactETHForTokens{value : value}(0, path, recipient, block.timestamp);\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function _swapTokenForNative(address token, uint amount, address recipient, address routerAddr) private returns (uint) {\\n        address[] memory path;\\n        IUniswapV2Router01 router = IUniswapV2Router01(routerAddr);\\n\\n        if (tokenBridgeForRouter[token][routerAddr] != address(0)) {\\n            path = new address[](3);\\n            path[0] = token;\\n            path[1] = tokenBridgeForRouter[token][routerAddr];\\n            path[2] = router.WETH();\\n        } else {\\n            path = new address[](2);\\n            path[0] = token;\\n            path[1] = router.WETH();\\n        }\\n\\n        uint[] memory amounts = router.swapExactTokensForETH(amount, 0, path, recipient, block.timestamp);\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function _swap(address _from, uint amount, address _to, address recipient, address routerAddr) private returns (uint) {\\n        IUniswapV2Router01 router = IUniswapV2Router01(routerAddr);\\n\\n        address fromBridge = tokenBridgeForRouter[_from][routerAddr];\\n        address toBridge = tokenBridgeForRouter[_to][routerAddr];\\n\\n        address[] memory path;\\n\\n        if (fromBridge != address(0) && toBridge != address(0)) {\\n            if (fromBridge != toBridge) {\\n                path = new address[](5);\\n                path[0] = _from;\\n                path[1] = fromBridge;\\n                path[2] = WNATIVE;\\n                path[3] = toBridge;\\n                path[4] = _to;\\n            } else {\\n                path = new address[](3);\\n                path[0] = _from;\\n                path[1] = fromBridge;\\n                path[2] = _to;\\n            }\\n        } else if (fromBridge != address(0)) {\\n            if (_to == WNATIVE) {\\n                path = new address[](3);\\n                path[0] = _from;\\n                path[1] = fromBridge;\\n                path[2] = WNATIVE;\\n            } else {\\n                path = new address[](4);\\n                path[0] = _from;\\n                path[1] = fromBridge;\\n                path[2] = WNATIVE;\\n                path[3] = _to;\\n            }\\n        } else if (toBridge != address(0)) {\\n            path = new address[](4);\\n            path[0] = _from;\\n            path[1] = WNATIVE;\\n            path[2] = toBridge;\\n            path[3] = _to;\\n        } else if (_from == WNATIVE || _to == WNATIVE) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            // Go through WNative\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WNATIVE;\\n            path[2] = _to;\\n        }\\n\\n        uint[] memory amounts = router.swapExactTokensForTokens(amount, 0, path, recipient, block.timestamp);\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function _estimateSwap(address _from, uint amount, address _to, address routerAddr) private view returns (uint) {\\n        IUniswapV2Router01 router = IUniswapV2Router01(routerAddr);\\n\\n        address fromBridge = tokenBridgeForRouter[_from][routerAddr];\\n        address toBridge = tokenBridgeForRouter[_to][routerAddr];\\n\\n        address[] memory path;\\n\\n        if (fromBridge != address(0) && toBridge != address(0)) {\\n            if (fromBridge != toBridge) {\\n                path = new address[](5);\\n                path[0] = _from;\\n                path[1] = fromBridge;\\n                path[2] = WNATIVE;\\n                path[3] = toBridge;\\n                path[4] = _to;\\n            } else {\\n                path = new address[](3);\\n                path[0] = _from;\\n                path[1] = fromBridge;\\n                path[2] = _to;\\n            }\\n        } else if (fromBridge != address(0)) {\\n            if (_to == WNATIVE) {\\n                path = new address[](3);\\n                path[0] = _from;\\n                path[1] = fromBridge;\\n                path[2] = WNATIVE;\\n            } else {\\n                path = new address[](4);\\n                path[0] = _from;\\n                path[1] = fromBridge;\\n                path[2] = WNATIVE;\\n                path[3] = _to;\\n            }\\n        } else if (toBridge != address(0)) {\\n            path = new address[](4);\\n            path[0] = _from;\\n            path[1] = WNATIVE;\\n            path[2] = toBridge;\\n            path[3] = _to;\\n        } else if (_from == WNATIVE || _to == WNATIVE) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            // Go through WNative\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WNATIVE;\\n            path[2] = _to;\\n        }\\n\\n        uint[] memory amounts = router.getAmountsOut(amount, path);\\n        return amounts[amounts.length - 1];\\n    }\\n\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function setTokenBridgeForRouter(address token, address router, address bridgeToken) external onlyOwner {\\n       tokenBridgeForRouter[token][router] = bridgeToken;\\n    }\\n\\n    function withdraw(address token) external onlyOwner {\\n        if (token == address(0)) {\\n            payable(owner()).transfer(address(this).balance);\\n            return;\\n        }\\n\\n        IERC20(token).transfer(owner(), IERC20(token).balanceOf(address(this)));\\n    }\\n\\n    function setUseNativeRouter(address router) external onlyOwner {\\n        useNativeRouter[router] = true;\\n    }\\n\\n    function setFee(address addr, uint16 rate, uint16 min) external onlyOwner {\\n        require(rate >= 25, \\\"FEE TOO HIGH; MAX FEE = 4%\\\");\\n        FEE_TO_ADDR = addr;\\n        FEE_RATE = rate;\\n        MIN_AMT = min;\\n        emit FeeChange(addr, rate, min);\\n    }\\n}\",\"keccak256\":\"0xefa50a7962e6a8729c958d19969e4aa3e9c5b9d677b541e4376694bbc5bc64eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101025760003560e01c806389fecbd511610095578063ba2ebf9611610064578063ba2ebf96146102ba578063c2ab127a146102da578063cee6202c146102fa578063d9059f1b1461031a578063f2fde38b1461033a57600080fd5b806389fecbd5146101f85780638da5cb5b146102185780638e8d8152146102455780639416cbc61461027a57600080fd5b80635cc7647c116100d15780635cc7647c14610183578063715018a6146101a357806388f61f9f146101b857806388fbe419146101d857600080fd5b80631b71afbd1461010e57806335e8b7d51461013057806351cff8d9146101435780635424888b1461016357600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b5061012e610129366004613a3a565b61035a565b005b61012e61013e3660046138ca565b61057f565b34801561014f57600080fd5b5061012e61015e366004613892565b610591565b34801561016f57600080fd5b5061012e61017e3660046138ca565b610729565b34801561018f57600080fd5b5061012e61019e3660046139e8565b610790565b3480156101af57600080fd5b5061012e610a60565b3480156101c457600080fd5b5061012e6101d33660046139e8565b610ad4565b3480156101e457600080fd5b5061012e6101f3366004613892565b610db6565b34801561020457600080fd5b5061012e6102133660046139e8565b610e04565b34801561022457600080fd5b506000546040516001600160a01b0390911681526020015b60405180910390f35b34801561025157600080fd5b50610265610260366004613914565b610e36565b6040805192835260208301919091520161023c565b34801561028657600080fd5b506102aa610295366004613892565b60046020526000908152604090205460ff1681565b604051901515815260200161023c565b3480156102c657600080fd5b5061012e6102d5366004613a3a565b6111d8565b3480156102e657600080fd5b5061012e6102f53660046139a4565b611204565b34801561030657600080fd5b5061012e610315366004613a3a565b611310565b34801561032657600080fd5b50610265610335366004613964565b61133c565b34801561034657600080fd5b5061012e610355366004613892565b611533565b61036f6001600160a01b03861633308761161d565b6103798583611688565b6000856001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b457600080fd5b505afa1580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec91906138ae565b90506000866001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561042957600080fd5b505afa15801561043d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046191906138ae565b905061046d8285611688565b6104778185611688565b600080856001600160a01b031663baa2abde85858b60008030426040518863ffffffff1660e01b81526004016104b39796959493929190613c48565b6040805180830381600087803b1580156104cc57600080fd5b505af11580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105049190613b99565b90925090506001600160a01b038481169088161461052c57610529848389308a611721565b91505b866001600160a01b0316836001600160a01b03161461055557610552838289308a611721565b90505b610574856105638484611efe565b6001600160a01b038a169190611f11565b505050505050505050565b61058b83348385611f46565b50505050565b6000546001600160a01b031633146105c45760405162461bcd60e51b81526004016105bb90613d74565b60405180910390fd5b6001600160a01b03811661061057600080546040516001600160a01b03909116914780156108fc02929091818181858888f1935050505015801561060c573d6000803e3d6000fd5b5050565b806001600160a01b031663a9059cbb6106316000546001600160a01b031690565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b15801561067057600080fd5b505afa158015610684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a89190613b81565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156106ee57600080fd5b505af1158015610702573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060c9190613b61565b50565b6000546001600160a01b031633146107535760405162461bcd60e51b81526004016105bb90613d74565b6001600160a01b03928316600090815260036020908152604080832094861683529390529190912080546001600160a01b03191691909216179055565b6107a56001600160a01b03851633308661161d565b6107af8483611688565b6000846001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ea57600080fd5b505afa1580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082291906138ae565b90506000856001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561085f57600080fd5b505afa158015610873573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089791906138ae565b90506108a38285611688565b6108ad8185611688565b6001546001600160a01b03838116911614806108d657506001546001600160a01b038281169116145b156109ad576001546000906001600160a01b03848116911614156108fa57816108fc565b825b9050600080866001600160a01b03166302751cec848a60008030426040518763ffffffff1660e01b815260040161093896959493929190613cd1565b6040805180830381600087803b15801561095157600080fd5b505af1158015610965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109899190613b99565b909250905061099a8383888a6120bf565b506109a5868261244e565b505050610a58565b600080856001600160a01b031663baa2abde85858a60008030426040518863ffffffff1660e01b81526004016109e99796959493929190613c48565b6040805180830381600087803b158015610a0257600080fd5b505af1158015610a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3a9190613b99565b9092509050610a4b848387896120bf565b50610574838287896120bf565b505050505050565b6000546001600160a01b03163314610a8a5760405162461bcd60e51b81526004016105bb90613d74565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b610ae96001600160a01b03851633308661161d565b6000849050610b68816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2a57600080fd5b505afa158015610b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6291906138ae565b84611688565b610ba4816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2a57600080fd5b610bb86001600160a01b0386168686611f11565b60405163226bf2d160e21b815230600482015260009081906001600160a01b038416906389afcb44906024016040805180830381600087803b158015610bfd57600080fd5b505af1158015610c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c359190613b99565b8092508193505050846001600160a01b031663e8e33700846001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8557600080fd5b505afa158015610c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbd91906138ae565b856001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610cf657600080fd5b505afa158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e91906138ae565b85856000808b426040518963ffffffff1660e01b8152600401610d58989796959493929190613c88565b606060405180830381600087803b158015610d7257600080fd5b505af1158015610d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daa9190613bbc565b50505050505050505050565b6000546001600160a01b03163314610de05760405162461bcd60e51b81526004016105bb90613d74565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b610e196001600160a01b03851633308661161d565b610e238483611688565b610e2f848483856120bf565b5050505050565b600080846001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610e7257600080fd5b505afa158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa91906138ae565b6001600160a01b0316866001600160a01b03161480610f4a5750846001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610efd57600080fd5b505afa158015610f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3591906138ae565b6001600160a01b0316866001600160a01b0316145b15611183576000856001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8a57600080fd5b505afa158015610f9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc291906138ae565b6001600160a01b0316876001600160a01b03161461105057856001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561101357600080fd5b505afa158015611027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104b91906138ae565b6110c1565b856001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561108957600080fd5b505afa15801561109d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c191906138ae565b905060006110d0856002612517565b905060006110e08983858a612523565b9050876001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561111b57600080fd5b505afa15801561112f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115391906138ae565b6001600160a01b0316896001600160a01b031614156111785790935091506111cf9050565b935091506111cf9050565b6001546000906001600160a01b038881169116146111ba576001546111b590889086906001600160a01b031688612523565b6111bc565b835b90506111c986868361133c565b92509250505b94509492505050565b6111ed6001600160a01b03861633308761161d565b6111f78583611688565b610a588585858486611721565b6000546001600160a01b0316331461122e5760405162461bcd60e51b81526004016105bb90613d74565b60198261ffff1610156112835760405162461bcd60e51b815260206004820152601a60248201527f46454520544f4f20484947483b204d415820464545203d20342500000000000060448201526064016105bb565b600280546001600160a01b0385166001600160b01b03199091168117600160a01b61ffff8681169182029290921761ffff60b01b1916600160b01b92861692830217909355604080519283526020830193909352918101919091527f85821cef013e8cfdef82753245b89968789e66779b634e6bc15eb1916a2aec899060600160405180910390a1505050565b6113256001600160a01b03861633308761161d565b61132f8583611688565b610a588585858486612cf6565b6000808061134b846002612517565b905060008690506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561138d57600080fd5b505afa1580156113a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c591906138ae565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561140257600080fd5b505afa158015611416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143a91906138ae565b6001549091506001600160a01b038381169116148061146657506001546001600160a01b038281169116145b156114e1576001546000906001600160a01b03848116911614611489578261148b565b815b6001549091506000906114a9906001600160a01b031687848d612523565b6001549091506001600160a01b03858116911614156114d25794965093945061152b9350505050565b965093945061152b9350505050565b6001546000906114fc906001600160a01b031686858c612523565b60015490915060009061151a906001600160a01b031687858d612523565b91975090955061152b945050505050565b935093915050565b6000546001600160a01b0316331461155d5760405162461bcd60e51b81526004016105bb90613d74565b6001600160a01b0381166115c25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105bb565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6040516001600160a01b038085166024830152831660448201526064810182905261058b9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613076565b604051636eb1769f60e11b81523060048201526001600160a01b03828116602483015283169063dd62ed3e9060440160206040518083038186803b1580156116cf57600080fd5b505afa1580156116e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117079190613b81565b61060c5761060c6001600160a01b03831682600019613148565b6001600160a01b0380861660009081526003602081815260408084208587168086529083528185205489871686529383528185209085529091528220549192849291811691166060821580159061178057506001600160a01b03821615155b156119d257816001600160a01b0316836001600160a01b03161461190b5760408051600580825260c08201909252906020820160a08036833701905050905089816000815181106117e157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061182357634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260015482519116908290600290811061186257634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505081816003815181106118a457634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505087816004815181106118e657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050611e29565b604080516003808252608082019092529060208201606080368337019050509050898160008151811061194e57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061199057634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505087816002815181106118e657634e487b7160e01b600052603260045260246000fd5b6001600160a01b03831615611bc1576001546001600160a01b0389811691161415611abb576040805160038082526080820190925290602082016060803683370190505090508981600081518110611a3a57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508281600181518110611a7c57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526001548251911690829060029081106118e657634e487b7160e01b600052603260045260246000fd5b60408051600480825260a0820190925290602082016080803683370190505090508981600081518110611afe57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508281600181518110611b4057634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152600154825191169082906002908110611b7f57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505087816003815181106118e657634e487b7160e01b600052603260045260246000fd5b6001600160a01b03821615611c935760408051600480825260a0820190925290602082016080803683370190505090508981600081518110611c1357634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526001805483519216918391908110611c5157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508181600281518110611b7f57634e487b7160e01b600052603260045260246000fd5b6001546001600160a01b038b811691161480611cbc57506001546001600160a01b038981169116145b15611d455760408051600280825260608201835290916020830190803683370190505090508981600081518110611d0357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505087816001815181106118e657634e487b7160e01b600052603260045260246000fd5b6040805160038082526080820190925290602082016060803683370190505090508981600081518110611d8857634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526001805483519216918391908110611dc657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508781600281518110611e0857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b6040516338ed173960e01b81526000906001600160a01b038616906338ed173990611e60908d90859087908e904290600401613dc2565b600060405180830381600087803b158015611e7a57600080fd5b505af1158015611e8e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611eb69190810190613aa1565b90508060018251611ec79190613e36565b81518110611ee557634e487b7160e01b600052603260045260246000fd5b6020026020010151955050505050505b95945050505050565b6000611f0a8284613dfe565b9392505050565b6040516001600160a01b038316602482015260448101829052611f4190849063a9059cbb60e01b90606401611651565b505050565b6000808590506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611f8757600080fd5b505afa158015611f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbf91906138ae565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611ffc57600080fd5b505afa158015612010573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203491906138ae565b6001549091506000906001600160a01b038481169116148061206357506001546001600160a01b038381169116145b156120a1576001546000906001600160a01b038581169116146120865783612088565b825b9050612096818a898b61326c565b93506120b392505050565b6120ae83838a898b61337f565b925050505b98975050505050505050565b6001600160a01b038481166000908152600360209081526040808320848616845290915281205490916060918491161561226857604080516003808252608082019092529060208201606080368337019050509150868260008151811061213657634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920181019190915288821660009081526003825260408082208885168352909252205483519116908390600190811061219157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050806001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156121ea57600080fd5b505afa1580156121fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222291906138ae565b8260028151811061224357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505061237d565b604080516002808252606082018352909160208301908036833701905050915086826000815181106122aa57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050806001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561230357600080fd5b505afa158015612317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233b91906138ae565b8260018151811061235c57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b6040516318cbafe560e01b81526000906001600160a01b038316906318cbafe5906123b4908a90859088908c904290600401613dc2565b600060405180830381600087803b1580156123ce57600080fd5b505af11580156123e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261240a9190810190613aa1565b9050806001825161241b9190613e36565b8151811061243957634e487b7160e01b600052603260045260246000fd5b60200260200101519350505050949350505050565b604080516000808252602082019092526001600160a01b0384169083906040516124789190613c2c565b60006040518083038185875af1925050503d80600081146124b5576040519150601f19603f3d011682016040523d82523d6000602084013e6124ba565b606091505b5050905080611f415760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016105bb565b6000611f0a8284613e16565b6001600160a01b0380851660009081526003602081815260408084208587168086529083528185205488871686529383528185209085529091528220549192849291811691166060821580159061258257506001600160a01b03821615155b156127d457816001600160a01b0316836001600160a01b03161461270d5760408051600580825260c08201909252906020820160a08036833701905050905088816000815181106125e357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061262557634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260015482519116908290600290811061266457634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505081816003815181106126a657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505086816004815181106126e857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050612c2b565b604080516003808252608082019092529060208201606080368337019050509050888160008151811061275057634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061279257634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505086816002815181106126e857634e487b7160e01b600052603260045260246000fd5b6001600160a01b038316156129c3576001546001600160a01b03888116911614156128bd57604080516003808252608082019092529060208201606080368337019050509050888160008151811061283c57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061287e57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526001548251911690829060029081106126e857634e487b7160e01b600052603260045260246000fd5b60408051600480825260a082019092529060208201608080368337019050509050888160008151811061290057634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061294257634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260015482519116908290600290811061298157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505086816003815181106126e857634e487b7160e01b600052603260045260246000fd5b6001600160a01b03821615612a955760408051600480825260a0820190925290602082016080803683370190505090508881600081518110612a1557634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526001805483519216918391908110612a5357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050818160028151811061298157634e487b7160e01b600052603260045260246000fd5b6001546001600160a01b038a811691161480612abe57506001546001600160a01b038881169116145b15612b475760408051600280825260608201835290916020830190803683370190505090508881600081518110612b0557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505086816001815181106126e857634e487b7160e01b600052603260045260246000fd5b6040805160038082526080820190925290602082016060803683370190505090508881600081518110612b8a57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526001805483519216918391908110612bc857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508681600281518110612c0a57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b60405163d06ca61f60e01b81526000906001600160a01b0386169063d06ca61f90612c5c908c908690600401613da9565b60006040518083038186803b158015612c7457600080fd5b505afa158015612c88573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612cb09190810190613aa1565b90508060018251612cc19190613e36565b81518110612cdf57634e487b7160e01b600052603260045260246000fd5b602002602001015195505050505050949350505050565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612d3157600080fd5b505afa158015612d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6991906138ae565b6001600160a01b0316866001600160a01b03161480612e095750836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015612dbc57600080fd5b505afa158015612dd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df491906138ae565b6001600160a01b0316866001600160a01b0316145b15613052576000846001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612e4957600080fd5b505afa158015612e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8191906138ae565b6001600160a01b0316876001600160a01b031614612f0f57846001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612ed257600080fd5b505afa158015612ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f0a91906138ae565b612f80565b846001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015612f4857600080fd5b505afa158015612f5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8091906138ae565b9050612f8c8184611688565b6000612f99876002612517565b90506000612faa8983853089611721565b905060006001600160a01b03861663e8e337008b86612fc98d88613475565b866000808e426040518963ffffffff1660e01b8152600401612ff2989796959493929190613c88565b606060405180830381600087803b15801561300c57600080fd5b505af1158015613020573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130449190613bbc565b9650611ef595505050505050565b6000613060878730866120bf565b905061306e85828686611f46565b915050611ef5565b60006130cb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134819092919063ffffffff16565b805190915015611f4157808060200190518101906130e99190613b61565b611f415760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105bb565b8015806131d15750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561319757600080fd5b505afa1580156131ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cf9190613b81565b155b61323c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016105bb565b6040516001600160a01b038316602482015260448101829052611f4190849063095ea7b360e01b90606401611651565b600080808061327c876002612517565b9050600061328c8983308a613498565b90506132988988611688565b6001600160a01b03871660009081526004602052604090205460ff161561335b57866001600160a01b03811663f305d7196132d38b86613475565b8c856000808d426040518863ffffffff1660e01b81526004016132fb96959493929190613cd1565b6060604051808303818588803b15801561331457600080fd5b505af1158015613328573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061334d9190613bbc565b955095509550505050613375565b866001600160a01b03811663f305d7196132d38b86613475565b9450945094915050565b600080808061338f876002612517565b9050600061339f8a83308a613498565b905060006133b88a6133b18b86613475565b308b613498565b90506133c48b89611688565b6133ce8a89611688565b6000889050806001600160a01b031663e8e337008d8d86866000808f426040518963ffffffff1660e01b815260040161340e989796959493929190613c88565b606060405180830381600087803b15801561342857600080fd5b505af115801561343c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134609190613bbc565b96509650965050505050955095509592505050565b6000611f0a8284613e36565b6060613490848460008561371a565b949350505050565b6001600160a01b03848116600090815260036020908152604080832084861684529091528120549091606091849116156135dd57604080516003808252608082019092529060208201606080368337505060015482519294506001600160a01b03169184915060009061351b57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920181019190915288821660009081526003825260408082208885168352909252205483519116908390600190811061357657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505086826002815181106135b857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505061368e565b6040805160028082526060820183529091602083019080368337505060015482519294506001600160a01b03169184915060009061362b57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050868260018151811061366d57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b6000816001600160a01b0316637ff36ab5886000868a426040518663ffffffff1660e01b81526004016136c49493929190613d0c565b6000604051808303818588803b1580156136dd57600080fd5b505af11580156136f1573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261240a9190810190613aa1565b60608247101561377b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105bb565b843b6137c95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105bb565b600080866001600160a01b031685876040516137e59190613c2c565b60006040518083038185875af1925050503d8060008114613822576040519150601f19603f3d011682016040523d82523d6000602084013e613827565b606091505b5091509150613837828286613842565b979650505050505050565b60608315613851575081611f0a565b8251156138615782518084602001fd5b8160405162461bcd60e51b81526004016105bb9190613d41565b803561ffff8116811461388d57600080fd5b919050565b6000602082840312156138a3578081fd5b8135611f0a81613ea5565b6000602082840312156138bf578081fd5b8151611f0a81613ea5565b6000806000606084860312156138de578182fd5b83356138e981613ea5565b925060208401356138f981613ea5565b9150604084013561390981613ea5565b809150509250925092565b60008060008060808587031215613929578081fd5b843561393481613ea5565b9350602085013561394481613ea5565b9250604085013561395481613ea5565b9396929550929360600135925050565b600080600060608486031215613978578283fd5b833561398381613ea5565b9250602084013561399381613ea5565b929592945050506040919091013590565b6000806000606084860312156139b8578283fd5b83356139c381613ea5565b92506139d16020850161387b565b91506139df6040850161387b565b90509250925092565b600080600080608085870312156139fd578384fd5b8435613a0881613ea5565b9350602085013592506040850135613a1f81613ea5565b91506060850135613a2f81613ea5565b939692955090935050565b600080600080600060a08688031215613a51578081fd5b8535613a5c81613ea5565b9450602086013593506040860135613a7381613ea5565b92506060860135613a8381613ea5565b91506080860135613a9381613ea5565b809150509295509295909350565b60006020808385031215613ab3578182fd5b825167ffffffffffffffff80821115613aca578384fd5b818501915085601f830112613add578384fd5b815181811115613aef57613aef613e8f565b8060051b604051601f19603f83011681018181108582111715613b1457613b14613e8f565b604052828152858101935084860182860187018a1015613b32578788fd5b8795505b83861015613b54578051855260019590950194938601938601613b36565b5098975050505050505050565b600060208284031215613b72578081fd5b81518015158114611f0a578182fd5b600060208284031215613b92578081fd5b5051919050565b60008060408385031215613bab578182fd5b505080516020909101519092909150565b600080600060608486031215613bd0578081fd5b8351925060208401519150604084015190509250925092565b6000815180845260208085019450808401835b83811015613c215781516001600160a01b031687529582019590820190600101613bfc565b509495945050505050565b60008251613c3e818460208701613e4d565b9190910192915050565b6001600160a01b039788168152958716602087015260408601949094526060850192909252608084015290921660a082015260c081019190915260e00190565b6001600160a01b039889168152968816602088015260408701959095526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b6001600160a01b039687168152602081019590955260408501939093526060840191909152909216608082015260a081019190915260c00190565b848152608060208201526000613d256080830186613be9565b6001600160a01b03949094166040830152506060015292915050565b6020815260008251806020840152613d60816040850160208701613e4d565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8281526040602082015260006134906040830184613be9565b85815284602082015260a060408201526000613de160a0830186613be9565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115613e1157613e11613e79565b500190565b600082613e3157634e487b7160e01b81526012600452602481fd5b500490565b600082821015613e4857613e48613e79565b500390565b60005b83811015613e68578181015183820152602001613e50565b8381111561058b5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072657600080fdfea2646970667358221220b6f0dd446a02ff31244e7b89e7c76d3f8e1169188bd6bec5f921b430090ecdb564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1957,
        "contract": "contracts/Zap.sol:Zap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2070,
        "contract": "contracts/Zap.sol:Zap",
        "label": "WNATIVE",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2072,
        "contract": "contracts/Zap.sol:Zap",
        "label": "FEE_TO_ADDR",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2074,
        "contract": "contracts/Zap.sol:Zap",
        "label": "FEE_RATE",
        "offset": 20,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 2076,
        "contract": "contracts/Zap.sol:Zap",
        "label": "MIN_AMT",
        "offset": 22,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 2082,
        "contract": "contracts/Zap.sol:Zap",
        "label": "tokenBridgeForRouter",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 2094,
        "contract": "contracts/Zap.sol:Zap",
        "label": "useNativeRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}